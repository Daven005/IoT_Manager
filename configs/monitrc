###############################################################################
## Monit control file
###############################################################################
##
## Comments begin with a '#' and extend through the end of the line. Keywords
## are case insensitive. All path's MUST BE FULLY QUALIFIED, starting with '/'.
##
## Below you will find examples of some frequently used statements. For
## information about the control file and a complete list of statements and
## options, please have a look in the Monit manual.
##
##
###############################################################################
## Global section
###############################################################################
##
## Start Monit in the background (run as a daemon):
#
  set daemon 120            # check services at 2-minute intervals
#   with start delay 240    # optional: delay the first check by 4-minutes (by
#                           # default Monit check immediately after Monit start)
#
#
## Set syslog logging. If you want to log to a standalone log file instead,
## specify the full path to the log file
#
  set logfile /var/log/monit.log
#
#
## Set the location of the Monit lock file which stores the process id of the
## running Monit instance. By default this file is stored in $HOME/.monit.pid
#
# set pidfile /var/run/monit.pid
#
## Set the location of the Monit id file which stores the unique id for the
## Monit instance. The id is generated and stored on first Monit start. By
## default the file is placed in $HOME/.monit.id.
#
# set idfile /var/.monit.id
  set idfile /var/lib/monit/id
#
## Set the location of the Monit state file which saves monitoring states
## on each cycle. By default the file is placed in $HOME/.monit.state. If
## the state file is stored on a persistent filesystem, Monit will recover
## the monitoring state across reboots. If it is on temporary filesystem, the
## state will be lost on reboot which may be convenient in some situations.
#
  set statefile /var/lib/monit/state
#
#

## Set limits for various tests. The following example shows the default values:
##
 set limits {
     programOutput:     512 B,      # check program's output truncate limit
     sendExpectBuffer:  256 B,      # limit for send/expect protocol test
     fileContentBuffer: 512 B,      # limit for file content test
     httpContentBuffer: 1 MB,       # limit for HTTP content test
     networkTimeout:    5 seconds   # timeout for network I/O
     programTimeout:    300 seconds # timeout for check program
     stopTimeout:       30 seconds  # timeout for service stop
     startTimeout:      30 seconds  # timeout for service start
     restartTimeout:    30 seconds  # timeout for service restart
 }

## Set global SSL options (just most common options showed, see manual for
## full list).
#
# set ssl {
#     verify     : enable, # verify SSL certificates (disabled by default but STRONGLY RECOMMENDED)
#     selfsigned : allow   # allow self signed SSL certificates (reject by default)
# }
#
#
## Set the list of mail servers for alert delivery. Multiple servers may be
## specified using a comma separator. If the first mail server fails, Monit
# will use the second mail server in the list and so on. By default Monit uses
# port 25 - it is possible to override this with the PORT option.
#
 set  mailserver mail.stackmail.com port 110 USERNAME david@norburys.me.uk PASSWORD dislopalio-1
#
## By default Monit will drop alert events if no mail servers are available.
## If you want to keep the alerts for later delivery retry, you can use the
## EVENTQUEUE statement. The base directory where undelivered alerts will be
## stored is specified by the BASEDIR option. You can limit the queue size
## by using the SLOTS option (if omitted, the queue is limited by space
## available in the back end filesystem).
#
  set eventqueue
      basedir /var/lib/monit/events # set the base directory where events will be stored
      slots 100                     # optionally limit the queue size
#
#
## Send status and events to M/Monit (for more informations about M/Monit
## see https://mmonit.com/). By default Monit registers credentials with
## M/Monit so M/Monit can smoothly communicate back to Monit and you don't
## have to register Monit credentials manually in M/Monit. It is possible to
## disable credential registration using the commented out option below.
## Though, if safety is a concern we recommend instead using https when
## communicating with M/Monit and send credentials encrypted. The password
## should be URL encoded if it contains URL-significant characters like
## ":", "?", "@".
#
# set mmonit http://monit:monit@192.168.1.10:8080/collector
#     # and register without credentials     # Don't register credentials
#
#
## Monit by default uses the following format for alerts if the the mail-format
## statement is missing::
## --8<--
## set mail-format {
##   from:    Monit <monit@$HOST>
##   subject: monit alert --  $EVENT $SERVICE
##   message: $EVENT Service $SERVICE
##                 Date:        $DATE
##                 Action:      $ACTION
##                 Host:        $HOST
##                 Description: $DESCRIPTION
##
##            Your faithful employee,
##            Monit
## }
## --8<--
##
## You can override this message format or parts of it, such as subject
## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.
## are expanded at runtime. For example, to override the sender, use:
#
# set mail-format { from: monit@foo.bar }
#
#
## You can set alert recipients whom will receive alerts if/when a
## service defined in this file has errors. Alerts may be restricted on
## events by using a filter as in the second example below.
#
# set alert sysadm@foo.bar                       # receive all alerts
#
## Do not alert when Monit starts, stops or performs a user initiated action.
## This filter is recommended to avoid getting alerts for trivial cases.
#
# set alert your-name@your.domain not on { instance, action }
#
#
## Monit has an embedded HTTP interface which can be used to view status of
## services monitored and manage services from a web interface. The HTTP
## interface is also required if you want to issue Monit commands from the
## command line, such as 'monit status' or 'monit restart service' The reason
## for this is that the Monit client uses the HTTP interface to send these
## commands to a running Monit daemon. See the Monit Wiki if you want to
## enable SSL for the HTTP interface.
#
 set httpd port 2812 and
     use address localhost        # only accept connection from localhost
     use address 0.0.0.0
     allow localhost
     allow 0.0.0.0/0.0.0.0   # allow localhost to connect to the server and
     allow admin:josh16      # require user 'admin' with password 'monit'
#
###############################################################################
## Services
###############################################################################
##
## Check general system resources such as load average, cpu and memory
## usage. Each test specifies a resource, conditions and the action to be
## performed should a test fail.
#
  check system $HOST
    if loadavg (1min) > 4 then exec /home/iot/monit/pushbullet.sh
    if loadavg (5min) > 3 then exec /home/iot/monit/pushbullet.sh
    if cpu usage > 95% for 10 cycles then exec /home/iot/monit/pushbullet.sh
    if memory usage > 85% then exec /home/iot/monit/pushbullet.sh
    if swap usage > 75% then exec /home/iot/monit/pushbullet.sh
#
#
## Check if a file exists, checksum, permissions, uid and gid. In addition
## to alert recipients in the global section, customized alert can be sent to
## additional recipients by specifying a local alert handler. The service may
## be grouped using the GROUP option. More than one group can be specified by
## repeating the 'group name' statement.
#
#  check file apache_bin with path /usr/local/apache/bin/httpd
#    if failed checksum and
#       expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor
#    if failed permission 755 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid root then unmonitor
#    alert security@foo.bar on {
#           checksum, permission, uid, gid, unmonitor
#        } with the mail-format { subject: Alarm! }
#    group server
#
#
## Check that a process is running, in this case Apache, and that it respond
## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,
## and number of children. If the process is not running, Monit will restart
## it by default. In case the service is restarted very often and the
## problem remains, it is possible to disable monitoring using the TIMEOUT
## statement. This service depends on another service (apache_bin) which
## is defined above.
#
  check process mysql with pidfile /var/run/mysqld/mysqld.pid
    start program = "/bin/systemctl start mysql" with timeout 60 seconds
    stop program  = "/bin/systemctl stop mysql"
    if cpu > 30% for 5 cycles then exec /home/iot/monit/pushbullet.sh
    if cpu > 60% for 2 cycles then restart
    if totalmem > 300.0 MB for 5 cycles then restart
    if children > 250 then restart
    if loadavg(5min) greater than 10 for 8 cycles then stop
    if 3 restarts within 5 cycles then unmonitor
    group server
#
#
  check process mosquitto with pidfile /var/run/mosquitto.pid
    start program = "/bin/systemctl start mosquitto" with timeout 60 seconds
    stop program  = "/bin/systemctl stop mosquitto"
    if cpu > 10% for 5 cycles then exec /home/iot/monit/pushbullet.sh
    if cpu > 20% for 2 cycles then restart
    if totalmem > 100.0 MB for 5 cycles then restart
    if children > 10 then restart
    if loadavg(5min) greater than 10 for 8 cycles then stop
    if 3 restarts within 5 cycles then unmonitor
    group server
#
  check process node-red matching "node-red"
    start program = "/bin/systemctl start node-red" with timeout 60 seconds
    stop program  = "/bin/systemctl stop node-red"
    if cpu > 10% for 5 cycles then exec /home/iot/monit/pushbullet.sh
    if cpu > 20% for 2 cycles then restart
    if totalmem > 100.0 MB for 5 cycles then restart
    if children > 10 then restart
    if loadavg(5min) greater than 10 for 8 cycles then stop
    if 3 restarts within 5 cycles then unmonitor
    group server


#
#
## Check filesystem permissions, uid, gid, space and inode usage. Other services,
## such as databases, may depend on this resource and an automatically graceful
## stop may be cascaded to them before the filesystem will become full and data
## lost.
#
  check filesystem hdd1 with path /dev/sda1
#    start program  = "/bin/mount /data"
#    stop program  = "/bin/umount /data"
#    if failed permission 660 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid disk then unmonitor
#    if space usage > 80% for 5 times within 15 cycles then exec /home/iot/monit/pushbullet.sh
#    if space usage > 99% then stop
#    if inode usage > 30000 then exec /home/iot/monit/pushbullet.sh
#    if inode usage > 99% then stop
#    group server
#
#
## Check a file's timestamp. In this example, we test if a file is older
## than 15 minutes and assume something is wrong if its not updated. Also,
## if the file size exceed a given limit, execute a script
#
#  check file database with path /data/mydatabase.db
#    if failed permission 700 then exec /home/iot/monit/pushbullet.sh
#    if failed uid data then exec /home/iot/monit/pushbullet.sh
#    if failed gid data then exec /home/iot/monit/pushbullet.sh
#    if timestamp > 15 minutes then exec /home/iot/monit/pushbullet.sh
#    if size > 100 MB then exec "/my/cleanup/script" as uid dba and gid dba
#
#
## Check directory permission, uid and gid.  An event is triggered if the
## directory does not belong to the user with uid 0 and gid 0.  In addition,
## the permissions have to match the octal description of 755 (see chmod(1)).
#
#  check directory bin with path /bin
#    if failed permission 755 then unmonitor
#    if failed uid 0 then unmonitor
#    if failed gid 0 then unmonitor
#
#
  check network public with interface eth0
    if failed link then exec /home/iot/monit/pushbullet.sh
    if changed link then exec /home/iot/monit/pushbullet.sh
#
## Check a remote host availability by issuing a ping test and check the
## content of a response from a web server. Up to three pings are sent and
## connection to a port and an application level network check is performed.
#
  check host EE-router with address 192.168.1.1
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host EE-berry-ex2 with address 192.168.1.2
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host EE-berry-G2 with address 192.168.1.3
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host EE-berry-ex4 with address 192.168.1.4
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host EE-berry-ex5 with address 192.168.1.5
    if failed ping for 5 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host Hollies-L with address 192.168.1.81
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host Hollies-F with address 192.168.1.82
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host Hollies-G with address 192.168.1.83
    if failed ping for 3 cycles then exec /home/iot/monit/pushbullet.sh
#
  check host google with address google.com
    if failed ping for 3 cycles 
      then exec /home/iot/monit/pushbullet.sh
    if failed port 80 protocol http for 3 cycles
      then exec /home/iot/monit/pushbullet.sh

  check host IoT_Manager with address localhost
    start program = "/bin/systemctl start IoT_Start" with timeout 60 seconds
    stop program  = "/bin/systemctl stop IoT_Start"
    if failed
       port 8090 protocol http
       with http headers [Host: mmonit.com, Cache-Control: no-cache]
       and request /SystemCheck with content = "OK"
       for 2 cycles
    then  exec /home/iot/monit/pushbullet.sh


#
##
## Check a network link status (up/down), link capacity changes, saturation
## and bandwidth usage.
#
#    if saturation > 90% then exec /home/iot/monit/pushbullet.sh
#    if download > 10 MB/s then exec /home/iot/monit/pushbullet.sh
#    if total uploaded > 1 GB in last hour then exec /home/iot/monit/pushbullet.sh
#
#
## Check custom program status output.
#
#  check program myscript with path /usr/local/bin/myscript.sh
#    if status != 0 then exec /home/iot/monit/pushbullet.sh
#
#
###############################################################################
## Includes
###############################################################################
##
## It is possible to include additional configuration parts from other files or
## directories.
#
   include /etc/monit/conf.d/*
   include /etc/monit/conf-enabled/*
#
